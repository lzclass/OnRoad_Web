My_Convention_For_JAVA_WEB_Programming：

################# DB 表名 #################
    1 一律小写（Mysql在linux下的表名称默认是有区分大小写的，驼峰式多有不便），多个独立的单词之间以下划线“_”隔开；
    2 当和sql保留字相同时，在结尾加“s”或者“es”;

################# DB 字段名 ###############
    1 采用【骆驼式】命名法，尽量避免了变量名中下划线"_"的出现；
        说明：本来用下划线命名的风格很流行，但是此处考虑到：java变量、方法命名风格都是驼峰式，
        如果用下划线命名表的字段，写代码时会同时掺杂“下划线式”和“驼峰式”两种不同风格，不利于统一和阅读；
    2 有些字段从含义和逻辑来看应该为复数，而有些字段则应该为单数，更有甚者可单可复，有鉴于此：为了避免混乱（单数复数混杂在一块的情况），一律采用单数；
    3 主键一律命名为“id”,字段是外键的，写成形如“xxxID”的款式；
    4 当和sql保留字相同时，在结尾加“s”或者“es”；

################# JAVA ###############
    0 无论是方法，变量，还是参数，一律遵循【驼峰式】命名法；
    1 some other demos ： xxxDAO, xxxID, xxxList, xxxMap；

################# HTML ###############
    1 文件名：依然是【驼峰式】命名法，part html（可分拆块）类型的，命名以“_”开头；

################# JS ###############
    1 方法，文件名：依然是【驼峰式】命名法；

################# CSS ###############
    0 class，ID：多个单词以“-”隔开（这也是bootstrap的命名风格）；
    1 class，ID：由于用到了bootstrap，有些时候样式会有冲突，所以，自定义的class一律在前面加一个“-”；

################# 构架、编码上的一些约定 ###############
    0 Model里的方法命名极致简洁：get()根据ID返回该model实例，getPage()返回page<model>，getList()返回list<model>
    1 除了getXxx这样命名的方法，其他方法【尽量】返回void；
    2 Controller里不要出现任何SQL语句，一律放到Model或者Service里；
    3 Cache里出现类似于“导航栏，侧边文章列表”这样的只有一个Object在Cache里的情况，约定让CacheKey = 1；